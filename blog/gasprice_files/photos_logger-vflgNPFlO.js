// Generated by CoffeeScript 1.3.3
var AlbumsLogger, PhotosEvents, PhotosLogger, PhotosTimingEvents, PhotosTourEvents, PhotosTriggers, PhotosViews;

AlbumsLogger = {
  log_share: function(evt, collection_gid, num_items, is_anonymous, on_create) {
    return AlbumsLogger.log(evt, collection_gid, true, num_items, is_anonymous, on_create);
  },
  log_event: function(evt, collection_gid, num_items, is_anonymous) {
    return AlbumsLogger.log(evt, collection_gid, false, num_items, is_anonymous);
  },
  log: function(evt, collection_gid, share_event, num_items, is_anonymous, on_create) {
    var parameters;
    parameters = {
      evt: evt,
      collection_gid: collection_gid,
      is_anonymous: is_anonymous
    };
    if (share_event != null) {
      parameters.share_event = share_event;
    }
    if (num_items != null) {
      parameters.num_items = num_items;
    }
    if (on_create != null) {
      parameters.on_create = on_create;
    }
    return new Ajax.DBRequest('/collection_log', {
      method: 'post',
      noAutonotify: true,
      parameters: parameters
    });
  }
};

PhotosEvents = {
  CLEAR_SELECTED: 'clear_selected',
  SHARE: 'share',
  SHARE_ALBUM: 'share_album',
  GO_TO_ALBUM_LINK: 'go_to_album_link',
  UNSHARE_ALBUM: 'unshare_album',
  ADD_TO_NEW_ALBUM: 'add_to_new_album',
  ADD_TO_RECENT_ALBUM: 'add_to_recent_album',
  ADD_TO_OTHER_ALBUM: 'add_to_other_album',
  SHOW_IN_FOLDER: 'show_in_folder',
  DELETE: 'delete',
  DELETE_ALBUM: 'delete_album',
  REMOVE: 'remove',
  SET_AS_COVER: 'set_as_cover',
  RENAME_ALBUM: 'rename_album',
  OPEN_LIGHTBOX: 'open_lightbox',
  MARQUEE_SELECT: 'marquee_select',
  SEND: 'send',
  GET_LINK: 'get_link',
  FB_SHARE: 'fb_share',
  TWITTER_SHARE: 'twitter_share'
};

PhotosTourEvents = {
  SKIP: 'skip',
  AWESOME: 'awesome',
  EXIT_MODAL: 'exit_modal',
  SHOW_MODAL: 'show_modal'
};

PhotosTriggers = {
  SAH: 'selected_actions_header',
  PCM: 'photos_context_menu',
  CCM: 'collections_context_menu',
  SCA: 'single_collection_action',
  CLICK: 'click',
  DBL_CLICK: 'double_click',
  DRAG: 'drag',
  ESC: 'escape',
  CLICK_TITLE: 'click_title',
  LIGHTBOX: 'lightbox',
  DROP_TARGET: 'drop_target',
  FOSHMODAL: 'foshmodal'
};

PhotosViews = {
  /* The three views on /Camera.  Used when logging view transitions.
  */

  PHOTOS_VIEW: 'photos_view',
  CAMERA_VIEW: 'camera_view',
  ALBUMS_VIEW: 'albums_view',
  SINGLE_COLLECTION_VIEW: 'single_collection_view',
  NOT_PHOTOS: 'not_photos',
  MISSING_TIMESTAMPS_VIEW: 'missing_timestamps_view'
};

PhotosLogger = {
  last_logged_error_msg: null,
  last_error_msg_url: null,
  get_current_view: function() {
    var foshmodal_showing, suffix;
    foshmodal_showing = $('modal').visible() && $('shmodal').visible();
    suffix = foshmodal_showing ? '-foshmodal' : '';
    if (Photos.in_single_collection_view()) {
      return PhotosViews.SINGLE_COLLECTION_VIEW + suffix;
    } else if (Photos.in_all_collections_view()) {
      return PhotosViews.ALBUMS_VIEW + suffix;
    } else if (Photos.initialized) {
      if (Photos._is_all_photos) {
        return PhotosViews.PHOTOS_VIEW + suffix;
      } else {
        return PhotosViews.CAMERA_VIEW + suffix;
      }
    } else {
      return PhotosViews.NOT_PHOTOS;
    }
  },
  log_interaction: function(evt, trigger, data) {
    return PhotosLogger.log(evt, trigger, null, PhotosLogger.get_current_view(), data);
  },
  log_transition_to: function(evt) {
    return PhotosLogger.log(evt, null, null, PhotosLogger.get_current_view(), null, true);
  },
  log: function(evt, trigger, view, start_view, data, transition) {
    var parameters;
    parameters = {
      evt: evt,
      trigger: trigger,
      view: view
    };
    if (data != null) {
      parameters.data = Util.to_json(data);
    }
    if (start_view != null) {
      parameters.start_view = start_view;
    }
    if (transition != null) {
      parameters.transition = true;
    }
    return new Ajax.DBRequest('/photos_log', {
      method: 'post',
      noAutonotify: true,
      parameters: parameters
    });
  }
};

PhotosTimingEvents = {
  viewport_loaded: 'viewport_loaded',
  viewport_initial_load: 'viewport_initial_load'
};
